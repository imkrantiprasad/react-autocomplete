{"version":3,"sources":["Autocomplete.js","App.js","serviceWorker.js","index.js"],"names":["Autocomplete","props","onChange","e","suggestions","userInput","currentTarget","value","filteredSuggestions","filter","suggestion","toLowerCase","indexOf","setState","activeSuggestion","showSuggestions","onClick","innerText","onKeyDown","state","keyCode","length","suggestionsListComponent","this","class","map","index","className","key","Fragment","type","Component","defaultProperty","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yNAGaA,EAAb,kDAOI,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IASVC,SAAW,SAAAC,GAAM,IACLC,EAAgB,EAAKH,MAArBG,YACFC,EAAYF,EAAEG,cAAcC,MAE5BC,EAAsBJ,EAAYK,QACpC,SAAAC,GAAU,OACNA,EAAWC,cAAcC,QAAQP,EAAUM,gBAAkB,KAGrE,EAAKE,SAAS,CACVC,iBAAkB,EAClBN,sBACAO,iBAAiB,EACjBV,UAAWF,EAAEG,cAAcC,SAvBhB,EA2BnBS,QAAU,SAAAb,GACN,EAAKU,SAAS,CACVC,iBAAkB,EAClBN,oBAAqB,GACrBO,iBAAiB,EACjBV,UAAWF,EAAEG,cAAcW,aAhChB,EAmCnBC,UAAY,SAAAf,GAAM,IAAD,EACqC,EAAKgB,MAA/CL,EADK,EACLA,iBAAkBN,EADb,EACaA,oBAE1B,GAAkB,KAAdL,EAAEiB,QACF,EAAKP,SAAS,CACVC,iBAAkB,EAClBC,iBAAiB,EACjBV,UAAWG,EAAoBM,UAEhC,GAAkB,KAAdX,EAAEiB,QAAgB,CACzB,GAAyB,IAArBN,EACA,OAGJ,EAAKD,SAAS,CAAEC,iBAAkBA,EAAmB,SAClD,GAAkB,KAAdX,EAAEiB,QAAgB,CACzB,GAAIN,EAAmB,IAAMN,EAAoBa,OAC7C,OAGJ,EAAKR,SAAS,CAAEC,iBAAkBA,EAAmB,MArDzD,EAAKK,MAAQ,CACTL,iBAAkB,EAClBN,oBAAqB,GACrBO,iBAAiB,EACjBV,UAAW,IANA,EAPvB,qDAkEc,IAYFiB,EAVApB,EASAqB,KATArB,SACAc,EAQAO,KARAP,QACAE,EAOAK,KAPAL,UAJC,EAWDK,KANAJ,MACIL,EANH,EAMGA,iBACAN,EAPH,EAOGA,oBACAO,EARH,EAQGA,gBACAV,EATH,EASGA,UAgCR,OA5BIU,GAAmBV,IAEfiB,EADAd,EAAoBa,OAEhB,wBAAIG,MAAM,eACLhB,EAAoBiB,KAAI,SAACf,EAAYgB,GAClC,IAAIC,EAMJ,OAJID,IAAUZ,IACVa,EAAY,qBAIZ,wBAAIA,UAAWA,EAAWC,IAAKlB,EAAYM,QAASA,GAC/CN,OAQjB,yBAAKc,MAAM,kBACP,gDAOZ,kBAAC,IAAMK,SAAP,KACI,2BACIC,KAAK,OACL5B,SAAUA,EACVgB,UAAWA,EACXX,MAAOF,IAEViB,OAnHjB,GAAkCS,aAArB/B,EAIFgC,gBAAkB,CACrB5B,YAAa,IAoHNJ,QClGAiC,E,uKAtBX,OACE,yBAAKN,UAAU,OACb,kBAAC,EAAD,CACEvB,YAAa,CAAC,cACZ,kBACA,eACA,YACA,eACA,eACA,SACA,eACA,YACA,mBACA,kBACA,cACA,6B,GAjBM2B,aCUEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.60d8322f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport class Autocomplete extends Component {\r\n    static propTypes = {\r\n        suggestions: PropTypes.instanceOf(Array)\r\n    };\r\n    static defaultProperty = {\r\n        suggestions: []\r\n    };\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            activeSuggestion: 0,\r\n            filteredSuggestions: [],\r\n            showSuggestions: false,\r\n            userInput: \"\"\r\n        };\r\n    }\r\n\r\n    onChange = e => {\r\n        const { suggestions } = this.props;\r\n        const userInput = e.currentTarget.value;\r\n\r\n        const filteredSuggestions = suggestions.filter(\r\n            suggestion =>\r\n                suggestion.toLowerCase().indexOf(userInput.toLowerCase()) > -1\r\n        );\r\n\r\n        this.setState({\r\n            activeSuggestion: 0,\r\n            filteredSuggestions,\r\n            showSuggestions: true,\r\n            userInput: e.currentTarget.value\r\n        });\r\n    };\r\n\r\n    onClick = e => {\r\n        this.setState({\r\n            activeSuggestion: 0,\r\n            filteredSuggestions: [],\r\n            showSuggestions: false,\r\n            userInput: e.currentTarget.innerText\r\n        });\r\n    };\r\n    onKeyDown = e => {\r\n        const { activeSuggestion, filteredSuggestions } = this.state;\r\n\r\n        if (e.keyCode === 13) {\r\n            this.setState({\r\n                activeSuggestion: 0,\r\n                showSuggestions: false,\r\n                userInput: filteredSuggestions[activeSuggestion]\r\n            });\r\n        } else if (e.keyCode === 38) {\r\n            if (activeSuggestion === 0) {\r\n                return;\r\n            }\r\n\r\n            this.setState({ activeSuggestion: activeSuggestion - 1 });\r\n        } else if (e.keyCode === 40) {\r\n            if (activeSuggestion - 1 === filteredSuggestions.length) {\r\n                return;\r\n            }\r\n\r\n            this.setState({ activeSuggestion: activeSuggestion + 1 });\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const {\r\n            onChange,\r\n            onClick,\r\n            onKeyDown,\r\n            state: {\r\n                activeSuggestion,\r\n                filteredSuggestions,\r\n                showSuggestions,\r\n                userInput\r\n            }\r\n        } = this;\r\n        let suggestionsListComponent;\r\n        if (showSuggestions && userInput) {\r\n            if (filteredSuggestions.length) {\r\n                suggestionsListComponent = (\r\n                    <ul class=\"suggestions\">\r\n                        {filteredSuggestions.map((suggestion, index) => {\r\n                            let className;\r\n\r\n                            if (index === activeSuggestion) {\r\n                                className = \"suggestion-active\";\r\n                            }\r\n\r\n                            return (\r\n                                <li className={className} key={suggestion} onClick={onClick}>\r\n                                    {suggestion}\r\n                                </li>\r\n                            );\r\n                        })}\r\n                    </ul>\r\n                );\r\n            } else {\r\n                suggestionsListComponent = (\r\n                    <div class=\"no-suggestions\">\r\n                        <em>No suggestions</em>\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <input\r\n                    type=\"text\"\r\n                    onChange={onChange}\r\n                    onKeyDown={onKeyDown}\r\n                    value={userInput}\r\n                />\r\n                {suggestionsListComponent}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Autocomplete;","import React, { Component } from \"react\";\nimport Autocomplete from \"./Autocomplete\";\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Autocomplete\n          suggestions={[\"Ahmad Faraz\",\n            \"Faiz Ahmad Faiz\",\n            \"Rahat Indori\",\n            \"Jaun Elia\",\n            \"Tehzeeb Hafi\",\n            \"Mirza Ghalib\",\n            \"Gulzar\",\n            \"Javed Akhtar\",\n            \"Ada Jafri\",\n            \"Firaq Gorakhpuri\",\n            \"Sahil Ludhianvi\",\n            \"Bashir Badr\",\n            \"Majrooh Sultanpuri\"]}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}